#!/usr/bin/env node
const {encrypt, decrypt} = require("hsencrypt");
const {WalletClient, NodeClient} = require('hs-client');
const {Network} = require('hsd');
const fs = require('fs');
const network = Network.get('main');
const ConsoleIO = new (require("consoleinout"))(console);
const constants = require("./lib/constants.js");

const nodeOptions = {
  network: network.type,
  port: network.rpcPort,
  apiKey: fs.readFileSync("keys/node").toString().trim()
}
const walletOptions = {
  port: network.walletPort,
  apiKey: fs.readFileSync("keys/wallet").toString().trim()
}
const nodeClient = new NodeClient(nodeOptions);
const _walletClient = new WalletClient(walletOptions);
let walletClient;

(async function() {
  const argv=process.argv;
  const argc=argv.length;

  if(argc!=6 && argc!=7) {
    console.log("Encrypt Usage: ",argv[1],"<wallet>","<from>","<to>","\"<msg>\"");
    console.log("");
    console.log("Decrypt Usage: ",argv[1],"<wallet>","<from>","<to>","\"<encrypted-msg>\"", "\"d\"");
    process.exit();
  }
  walletClient = _walletClient.wallet(argv[2]);
  if(!walletClient) {
    console.log("Wallet ",argv[2],"not found");
    process.exit(0);
  }

  console.output("Enter Password: ");
  const password = await console.input(true);

  let bName,bMessage;
  if(argc==7) {
    let decrypted=await decrypt(walletClient, nodeClient, password, argv[4], argv[3], argv[5]);
    console.log("Decrypted: ",decrypted);
    process.exit(0);
  }
  else if(argc==6) {
    let encrypted=await encrypt(walletClient, nodeClient, password, argv[3], argv[4], argv[5]);
    console.log(encrypted);
    bName = argv[3];
    bMessage = encrypted;
  }
  const records = await writeZmsg(bName,bMessage);
  const options = {passphrase:password,name:bName,broadcast:true,sign:true,data:{records: records}};
  if(!options.data.records) {
    console.log("zmsg broadcast failed");
    process.exit(0);
  }
  let result;
  try {
    result = await walletClient.createUpdate(options);
  } catch(e) {
    console.log("zmsg failed (incorrect password or need to wait until next block?)");
    process.exit(0);
  }
  console.log(result);
  process.exit(0);
})()

async function getNameResource(name) {
  let rr = await nodeClient.execute('getnameresource', [name])
  if(rr)
    return rr.records;
  return null;
}
async function _writeZmsg(name,message) {
  if(message.length+constants.MAX_TXT>constants.MAGIC_ZMSG)
    return null;
  let records = await getNameResource(name);
  let returnRecord = [];
  if(records) {
    for(let x=0;x<records.length;x++) {
      let rec = records[x];
      if(rec.type=="TXT") {
        if(rec.txt) {
          if(rec.txt[0].startsWith(constants.MAGIC_ZOOKO) || rec.txt[0].startsWith(constants.MAGIC_ZMSG))
            continue;
        }
      }
      returnRecord.push(rec);
    }
    returnRecord.push({type:"TXT",txt:[message]});
    return returnRecord;
  }
}
async function writeZmsg(name, message) { return await _writeZmsg(name, constants.MAGIC_ZMSG+message) }

